# -*- coding: utf-8 -*-
"""gan_synth_metrics_evaluation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tPEadtId0r11cOTF9R_sDq_cXZmcmpmq

# **SDGym - Synthetic Data Gym Metrics Evaluation**
"""

import os
import sys
import platform
import timeit
import pdb
from pathlib import Path

# All Hyper-parameters

epochs = 20

# Initializations 

colab_active = 'google.colab' in sys.modules
print("Colab Active: ", colab_active)
# Operating System
OS = platform.system()                           # returns 'Windows', 'Linux', etc

if not os.path.exists('./Output'):
   os.makedirs('./Output')

if not os.path.exists('./Output/Pictures'):
   os.makedirs('./Output/Pictures')

# All Globals

dataset = 'telephony'   # satgpa, acs, telephony
orig_data_path = './syntetic_telephony.xlsx'
#synth_data_path = './Output/telephony_synth_data_generated_by_method_copulagantotal_time_3_epochs_10000_obs_26.8_score_-1.xlsx'
#synth_data_path = './Output/telephony_synth_data_generated_by_method_copulagantotal_time_50_epochs_10000_obs_565.57_score_-1.xlsx'
synth_data_path = './Output'
synth_data_name = os.path.basename(synth_data_path).rsplit('.', 1)[0]
display_matches = False
install_libraries = False
export_preprocessed_orig_data = True
read_synth_data_from_file = False
verbose = False

# Libraries Installation Section

if install_libraries is True: 
    os.system('pip install sdgym==0.5.0')
    os.system('pip install matplotlib==3.1.3')
    os.system('pip install openpyxl')

# All Imports

import glob
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics

from sdv.evaluation import evaluate
from sdv.metrics.tabular import CSTest, KSTest                                      # Statistical Metrics
from sdv.metrics.tabular import BNLikelihood, BNLogLikelihood, GMLogLikelihood      # Likelihood Metrics¶
from sdv.metrics.tabular import LogisticDetection, SVCDetection                     # Detection Metrics
from sdv.metrics.tabular import MulticlassDecisionTreeClassifier                    # Machine Learning Efficacy Metrics¶
from sdv.metrics.tabular import NumericalLR

from sdv.tabular import CopulaGAN

from synth_utility_libs import explore_data, preprocess_telephony_data

# All Settings

start_global_time = timeit.default_timer()
pd.set_option('display.max_columns', 500) 
pd.set_option('display.max_rows', 500) 

# Model Definition
cg_model = CopulaGAN(
  epochs=epochs,
  batch_size=100,
  generator_dim=(256, 256, 256),
  discriminator_dim=(256, 256, 256)
)

# Look for all models and Synthetic Data Generation into specific folders

files = [str(f) for f in sorted(Path('./').rglob('*_'+str(epochs)+'_*.pkl'))]
files.sort(key = lambda x: int(x.split('_')[4]))
for path in files:
    print('\n\n'+path)
    
    if not os.path.exists('./Output/'+path.split('.')[0]):
       os.makedirs('./Output/'+path.split('.')[0])

    cg_model = cg_model.load(path)

    n_to_generate = int(path.split('_')[4])

    # Original Data Reading
    
    xl_file = pd.ExcelFile(orig_data_path)
    dfs = {sheet_name: xl_file.parse(sheet_name) for sheet_name in xl_file.sheet_names}
    orig_data = dfs['Sheet1']

    # Original Data Preprocessing
    
    if dataset is 'telephony':
        if verbose is True: 
            print("\n\nSample of Real Telephony Data: \n\n", orig_data.head)
        
        orig_data_new = preprocess_telephony_data(orig_data, verbose)                                  # Data Preprocessing for Telephony
    
        if verbose is True: 
            print("\n\nSample of Real Preprocessed Telephony Data: \n\n", orig_data_new.head)
    
        if verbose is True: 
            explore_data(orig_data_new)

        # Removing C character from the Original Data
        orig_data_new["CELL_CALL_CODE"] = orig_data_new["CELL_CALL_CODE"].str.replace("C","")
        orig_data_new["NUM_CALLER_KEY"] = orig_data_new["NUM_CALLER_KEY"].str.replace("C","")
    
        # Original Data Exports
    
    if export_preprocessed_orig_data is True: 
        orig_data_new.to_excel('./Output/telephony_preprocessed_export.xlsx')
        orig_data_new.to_csv('./Output/telephony_preprocessed_export.csv')

    # Synthetic Data Reading
    if read_synth_data_from_file is True: 
        xl_file = pd.ExcelFile(synth_data_path)
        dfs = {sheet_name: xl_file.parse(sheet_name) for sheet_name in xl_file.sheet_names}
        synth_data = dfs['Sheet1']
        
        # Synthetic Data Preprocessing
        synth_data.drop("Unnamed: 0", axis=1, inplace=True)
    else: 
        synth_data = cg_model.sample(n_to_generate)                 # Data Generation

    if dataset is 'telephony':
        # Removing C character from the Synthetic Data
        synth_data["CELL_CALL_CODE"] = synth_data["CELL_CALL_CODE"].str.replace("C","")
        synth_data["NUM_CALLER_KEY"] = synth_data["NUM_CALLER_KEY"].str.replace("C","")

        synth_data.to_excel('./Output/'+path.split('.')[0]+'/telephony_synth_data_generated_by_method_'+str(epochs)+'_epochs_'+str(n_to_generate)+'_obs_.xlsx')
        synth_data.to_csv('./Output/'+path.split('.')[0]+'/telephony_synth_data_generated_by_method_'+str(epochs)+'_epochs_'+str(n_to_generate)+'_obs_.csv')
    
    if verbose is True: 
        explore_data(synth_data)
        
    # Model Evaluation via SDGym Tools
    
    with open('./Output/'+path.split('.')[0]+'/'+synth_data_name+'_sd_gym_tests.txt', 'w') as f:
        f.writelines("SD GYM Tests Results: \n\n")

    # Statistical Metrics**

    # Chi-Squared test 
    start_test_time = timeit.default_timer()
    results = CSTest.compute(orig_data_new, synth_data)
    print("Chi-Squared Test Test Results: ", results)
    with open('./Output/'+path.split('.')[0]+'/'+synth_data_name+'_sd_gym_tests.txt', 'a') as f:
        f.writelines("Chi-Squared Test Test Results: " +str(results))
    print("Chi-Squared Metrics Test - Elapsed Time = ", timeit.default_timer() - start_test_time)
    

    # Inverted Kolmogorov-Smirnov
    # We preliminarly convert categorical variabels into numeric in order to calculate the Kolmogorov-Smirnov test
    start_test_time = timeit.default_timer()
    tmp_orig_data_new = orig_data_new.copy()
    tmp_synth_data = synth_data.copy()
    tmp_orig_data_new.CELL_CALL_CODE = pd.to_numeric(tmp_orig_data_new.CELL_CALL_CODE)
    tmp_orig_data_new.NUM_CALLER_KEY = pd.to_numeric(tmp_orig_data_new.NUM_CALLER_KEY)
    tmp_synth_data.CELL_CALL_CODE = pd.to_numeric(tmp_synth_data.CELL_CALL_CODE)
    tmp_synth_data.NUM_CALLER_KEY = pd.to_numeric(tmp_synth_data.NUM_CALLER_KEY)
    results = KSTest.compute(tmp_orig_data_new, tmp_synth_data)
    print("Kolmogorov-Smirnov Test Test Results: ", results)
    with open('./Output/'+path.split('.')[0]+'/'+synth_data_name+'_sd_gym_tests.txt', 'a') as f:
        f.writelines("\n\nKolmogorov-Smirnov Test Test Results: " +str(results))
    print("Kolmogorov-Smirnov Metrics Test - Elapsed Time = ", timeit.default_timer() - start_test_time)

    # Likelihood Metrics
    start_test_time = timeit.default_timer()
    results = BNLikelihood.compute(orig_data_new.fillna(0), synth_data.fillna(0))
    print("BNLikelihood Test Results: ", results)
    with open('./Output/'+path.split('.')[0]+'/'+synth_data_name+'_sd_gym_tests.txt', 'a') as f:
        f.writelines("\n\nBNLikelihood Test Results: " +str(results))
    print("BNLikelihood Metrics Test - Elapsed Time = ", timeit.default_timer() - start_test_time)
    
    start_test_time = timeit.default_timer()
    results = BNLogLikelihood.compute(orig_data_new.fillna(0), synth_data.fillna(0))
    print("BNLogLikelihood Test Results: ", results)
    with open('./Output/'+path.split('.')[0]+'/'+synth_data_name+'_sd_gym_tests.txt', 'a') as f:
        f.writelines("\n\nBNLogLikelihood Test Results: " +str(results))
    print("BNLogLikelihood Metrics Test - Elapsed Time = ", timeit.default_timer() - start_test_time)

    # Detection Metrics
    '''
    start_test_time = timeit.default_timer()
    results = LogisticDetection.compute(orig_data_new, synth_data)
    print("Detection Metrics Test n.1 (Logistic) Results: ", results)
    with open('./Output/'+path.split('.')[0]+'/'+synth_data_name+'_sd_gym_tests.txt', 'a') as f:
        f.writelines("\n\nDetection Metrics Test n.1 (Logistic) Results: " +str(results))
    print("Detection Metrics Test n.1 (Logistic) - Elapsed Time = ", timeit.default_timer() - start_test_time)
    '''

'''
start_test_time = timeit.default_timer()
results = SVCDetection.compute(orig_data_new, synth_data)
print("Detection Metrics Test n.2 (Support Vector Machine) Results: ", results)
with open('./Output/'+synth_data_name+'_sd_gym_tests.txt', 'a') as f:
    f.writelines("\n\nDetection Metrics Test n.2 (Logistic) Results: " +str(results))
print("Detection Metrics Test n.2 (Support Vector Machine) - Elapsed Time = ", timeit.default_timer() - start_test_time)

# Machine Learning Efficacy Metrics

start_test_time = timeit.default_timer()
results = MulticlassDecisionTreeClassifier.compute(orig_data_new, synth_data, target='CELL_CALL_CODE')
print("Machine Learning Efficacy Metrics Test n.1 Results: ", results)
with open('./Output/'+synth_data_name+'_sd_gym_tests.txt', 'a') as f:
    f.writelines("\n\nMachine Learning Efficacy Metrics Test n.1 Results: " +str(results))
print("Machine Learning Efficacy Metrics Test n.1 - Elapsed Time = ", timeit.default_timer() - start_test_time)


start_test_time = timeit.default_timer()
results = MulticlassDecisionTreeClassifier.compute(orig_data_new, synth_data, target='NUM_CALLER_KEY')
print("Machine Learning Efficacy Metrics Test n.2 Results: ", results)
with open('./Output/'+synth_data_name+'_sd_gym_tests.txt', 'a') as f:
    f.writelines("\n\nMachine Learning Efficacy Metrics Test n.2 Results: " +str(results))
print("Machine Learning Efficacy Metrics Test n.2 - Elapsed Time = ", timeit.default_timer() - start_test_time)

# Privacy Metrics 1

'''
'''
start_test_time = timeit.default_timer()
tmp_orig_data_new = orig_data_new.copy()
tmp_synth_data = synth_data.copy()
tmp_orig_data_new.CELL_CALL_CODE = pd.to_numeric(tmp_orig_data_new.CELL_CALL_CODE)
tmp_orig_data_new.NUM_CALLER_KEY = pd.to_numeric(tmp_orig_data_new.NUM_CALLER_KEY)
tmp_synth_data.CELL_CALL_CODE = pd.to_numeric(tmp_synth_data.CELL_CALL_CODE)
tmp_synth_data.NUM_CALLER_KEY = pd.to_numeric(tmp_synth_data.NUM_CALLER_KEY)
results = NumericalLR.compute(tmp_orig_data_new.fillna(0), tmp_synth_data.fillna(0), key_fields=['NUM_CALLER_KEY'], sensitive_fields=['CELL_CALL_CODE'])
print("Privacy Metrics 1 Test n.1 Results: ", results)
print("Privacy Metrics 1 Test n.1 - Elapsed Time = ", timeit.default_timer() - start_test_time)


start_test_time = timeit.default_timer()
tmp_orig_data_new = orig_data_new.copy()
tmp_synth_data = synth_data.copy()
tmp_orig_data_new.CELL_CALL_CODE = pd.to_numeric(tmp_orig_data_new.CELL_CALL_CODE)
tmp_orig_data_new.NUM_CALLER_KEY = pd.to_numeric(tmp_orig_data_new.NUM_CALLER_KEY)
tmp_synth_data.CELL_CALL_CODE = pd.to_numeric(tmp_synth_data.CELL_CALL_CODE)
tmp_synth_data.NUM_CALLER_KEY = pd.to_numeric(tmp_synth_data.NUM_CALLER_KEY)
results = NumericalLR.compute(tmp_orig_data_new.fillna(0), tmp_synth_data.fillna(0), key_fields=['CELL_CALL_CODE'], sensitive_fields=['NUM_CALLER_KEY'])
print("Privacy Metrics 1 Test n.2 Results: ", results)
print("Privacy Metrics 1 Test n.2 - Elapsed Time = ", timeit.default_timer() - start_test_time)


# Overall Aggregated Score Metrics

start_test_time = timeit.default_timer()
tmp_orig_data = orig_data.copy()
tmp_synth_data = synth_data.copy()
tmp_orig_data.CELL_CALL_CODE = pd.to_numeric(tmp_orig_data.CELL_CALL_CODE)
tmp_orig_data.NUM_CALLER_KEY = pd.to_numeric(tmp_orig_data.NUM_CALLER_KEY)
tmp_synth_data.CELL_CALL_CODE = pd.to_numeric(tmp_synth_data.CELL_CALL_CODE)
tmp_synth_data.NUM_CALLER_KEY = pd.to_numeric(tmp_synth_data.NUM_CALLER_KEY)
results = evaluate(tmp_synth_data, tmp_orig_data)
print("Overall Aggregated Metrics Results: ", results)
print("Overall Aggregated Metrics - Elapsed Time = ", timeit.default_timer() - start_test_time)
'''
